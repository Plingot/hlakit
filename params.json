{"name":"HLAKit","tagline":"","body":"## Variables and Types\r\n\r\nThe HLAKit language has a base set of types that is supported on all targets, although the size, in bytes, for each variable may change based on the specified target.  HLAKit supports a C-like `struct` construct for complex data types.\r\n\r\n### The Basic Types\r\n\r\nType|Size (bytes)|Range|Description|Notes|\r\n----|------------|-----|-----------|-----|\r\nbyte|1|0 to 255|8-bit unsigned|\r\nchar|1|-128 to 127|8-bit signed|\r\nbool|1|0 to 255|8-bit boolean|Either zero or non-zero\r\nword|2|0 to 65535|16-bit unsigned|16-bit capable CPU's only\r\ndword|4|0 to 4294967295|32-bit unsigned|32-bit capable CPU's only\r\npointer|1/2/4||8/16/32-bit address|Platform and CPU specific\r\nstruct|||Arbitrary complex type|\r\n\r\n### Typedef\r\n\r\nSyntax:\r\n```\r\ntypedef TYPE LABEL [ARRAY_SIZE]\r\n```\r\n\r\nThe `typedef` keyword works exactly like the C `typedef`.  It creates a type alias.  This is really only useful for reducing how much you type and making code more readable.\r\n\r\nExamples:\r\n```\r\n// standard type alias\r\ntypedef byte BLAH\r\n\r\n// array type alias\r\ntypedef char player_name[16]\r\n\r\n// struct type alias\r\ntypedef struct coords\r\n{\r\n    byte x\r\n    byte y\r\n} coordinates\r\n```\r\n\r\n### Struct\r\n\r\nSyntax:\r\n```\r\nstruct LABEL\r\n{\r\n    TYPE LABEL[, LABEL, ...]\r\n}\r\n```\r\n\r\nThe `struct` keyword is used to create new, complex types that are structured containers of named members.  Structs can contain any number of members of any valid type, including other structs.  The type of a struct member can be any of the basic types or an already declared struct type.\r\n\r\nExamples:\r\n```\r\nstruct time\r\n{\r\n    byte ticks\r\n    byte seconds\r\n    byte minutes\r\n    byte hours\r\n}\r\n\r\nstruct scrollTo\r\n{\r\n    byte flags\r\n    word x, y\r\n}\r\n\r\nstruct player\r\n{\r\n    byte sprite\r\n    byte joypad\r\n    struct move\r\n    {\r\n        byte x, y\r\n        byte amount\r\n    } move\r\n    byte anArray[10]\r\n}\r\n```\r\n\r\n### Shared\r\n\r\nThe `shared` keyword is used when declaring new variables and is used to indicate a variable that can be used from multiple execution contexts.  On targets that support interrupts, any variables referenced from both interrupts and the regular code must be declared as `shared` otherwise the HLAKit compiler will output an error.\r\n\r\n### Variable Declarations\r\n\r\nSyntax:\r\n```\r\n[shared] TYPE LABEL [ARRAY_SIZE] [:ADDRESS] [= VALUE]\r\n```\r\n\r\nNamed variables make coding in assembly much easier.  HLAKit variables are very flexible and do a lot of the hard work for you.\r\n\r\nExamples:\r\n```\r\nbyte counter\r\nbyte initialized_counter = 123\r\nstruct coords { byte x, y } myCoords\r\nstruct coords theirCoords = { 5, 6 }\r\nbyte initialized_array[] = { 1, 2, 3, 4, 5 }\r\n```\r\n","google":"UA-10082522-6","note":"Don't delete this file! It's used internally to help with page regeneration."}
